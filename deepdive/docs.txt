from django.db import models

"""
A model is the single, definitive source of information about your data
Each model maps to a database table
"""

# Quick Example
class Person(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)

# Simply add the app to settings.py
# run python manage.py makemigrations
# then run python manage.py migrate

from pyexpat import model
import re
from django.db import models

"""
    Database Fields are defined as class attributes
    Be careful not to choose field names that conflict with models API

    Field Options
        verbose_name, null, blank, choices, default, help_text, primary_key, unique
    
    This is how django sets the id automatically
        id = models.BigAutoField(primary_key=True)

    verbose_name is a positional argument except in ForeignKey, ManyToManyField, and OneToOneField
"""


class Artist(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    instrument = models.CharField(max_length=100)


class Album(models.Model):
    artist = models.ForeignKey(Artist, on_delete=models.CASCADE)
    name = models.CharField(max_length=100)
    release_date = models.DateField()
    num_stars = models.IntegerField()


""""""
class Person(models.Model):
    SHIRT_SIZES = (
        ('S', 'Small'),
        ('M', 'Meduim'),
        ('L', 'Large')
    )
    name = models.CharField(max_length=60)
    shirt_size = models.CharField(max_length=1, choices=SHIRT_SIZES)

    # p = Person(name="Tolulope", shirt_size="L")
    # p.save()
    # p.shirt_size => 'L'
    # p.get_shirt_size_display() => 'Large'

# You can also use enumeration classes to define choices in a concise way


class Runner(models.Model):
    MedalType = models.TextChoices('MedalType', 'GOLD SILVER BRONZE')
    name = models.CharField(max_length=60)
    medal = models.CharField(
        blank=True, choices=MedalType.choices, max_length=10)


# primary_key
# If you change the primary_key on an existing object, then save it, a new object is created

class Fruit(models.Model):
    name = models.CharField(max_length=60, primary_key=True)

    # fruit = Fruit.objects.create(name="Apple")
    # fruit.name = "Pear"
    # fruit.save()

    # Fruits.objects.values_list('name', flat=True) => ['Apple', 'Pear']


"""
    Relationships
        many-to-one: ForeignKey()
        many-to-many: ManyToManyField()
        one-to-one: OneToOneField()
"""

# many-to-one relationship
# Example a Manufacturer can produce many cars but one car car can only have one Manufacturer


class Manufacturer(models.Model):
    pass


class Car(models.Model):
    manufacturer = models.ForeignKey(Manufacturer, on_delete=models.CASCADE)

# many-to-many relationship
# Example a Topping can be on many Pizzas and each Pizza can also have many Toppings
# Check docs for more rel, Group, Person, Membership soln


class Topping(models.Model):
    pass


class Pizza(models.Model):
    toppings = models.ManyToManyField(Topping)


# one-to-one relationship
# This is most useful on the primary key of an object when that object "extends" another object in some way

# It's perfectly okay to relate a model from another app


# Custom field types
# Meta Options
class Ox(models.Model):
    horn_length = models.IntegerField()

    class Meta:
        db_name = "ox_table"
        ordering = ["horn_length"]
        verbose_plural_name = "oxen"
    # They are not a field
    # Used for ordering, changing db_name


# Models can also have Methods
class Person(models.Model):
    first_name = models.CharField(max_length=60)
    last_name = models.CharField(max_length=60)
    birth_date = model.DateField()

    def baby_boomer_status(self):
        "Returns the person's bay-boomer status"
        import datetime
        if self.birth_date < datetime.date(1945, 8, 1):
            return "Pre-boomer"
        elif self.birth_date < datetime.date(1965, 1, 1):
            return "Baby boomer"
        else:
            return "Post boomer"

    @property
    def full_name(self):
        return "%s %s" % (self.first_name, self.last_name)
    
    def __str__(self):
        return "%s %s" % (self.first_name, self.last_name)


"""
    Making Queries
"""
from datetime import date, datetime
from django.db import models

class Blog(models.Model):
    name = models.CharField(max_length=100)
    tagline = models.TextField()

    def __str__(self):
        return self.name

class Author(models.Model):
    name = models.CharField(max_length=200)
    email = models.EmailField()

    def __str__(self):
        return self.name

class Entry(models.Model):
    blog = models.ForeignKey(Blog, on_delete=models.CASCADE)
    headline = models.CharField(max_length=255)
    body_text = models.TextField()
    pub_date = models.DateField()
    mod_date = models.DateField()
    authors = models.ManyToManyField(Author)
    number_of_comments = models.IntegerField(default=0)
    number_of_pingbacks = models.IntegerField(default=0)
    rating = models.IntegerField(default=5)

    def __str__(self):
        return self.headline


# Creating Objects

# from blog.models import Blog
b = Blog(name="Beatles Blog", tagline="All the latest Beatles news")
b.save()

b.name = "New name"
b.save()

# Saving ForeignKey and ManyToMany fields
entry = Entry.objects.get(pk=1)
cheese_blog = Blog.objects.get(name="Cheddar Talk")
entry.blog = cheese_blog
entry.save()

# ManyToMany - use add()
joe = Author.objects.create(name="Joe")
entry.authors.add(joe)

paul = Author.objects.create(name="Paul")
george = Author.objects.create(name="George")
sam = Author.objects.create(name="Sam")
entry.authors.add(paul, george, sam)


# Retrieving objects => all(), get(), filter(), exclude(), order_by()
# all
all_entries = Entry.objects.all()
all_entries = Entry.objects.all()[0:5]

# using filters => filter(), exclude()
Entry.objects.filter(pub_date__year=2020)
Entry.objects.all().filter(pub_date__year=2020)

# Chaining filters
Entry.objects.filter(
    headline__startswith="What"
).exclude(
    pub_date__gte=datetime.date.today()
).filter(
    pub_date__gte=datetime.date(2005, 1, 30)
)

# Single object
Entry.objects.get(pk=1)

# Ordering
Entry.objects.order_by('headline')[0:1]

# Field Lookups
"""
    pub_date__lte=''
    headline__exact=''
    name__iexact=''
    headline__contains=''
    headline__istartswith=''
    headline__iendswith=''
"""


""""""